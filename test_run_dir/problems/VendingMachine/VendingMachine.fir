;buildInfoPackage: chisel3, version: 3.3.1, scalaVersion: 2.12.11, sbtVersion: 1.3.10
circuit VendingMachine : 
  module VendingMachine : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip nickel : UInt<1>, flip dime : UInt<1>, valid : UInt<1>}
    
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[VendingMachine.scala 22:22]
    node _T = eq(state, UInt<3>("h00")) @[VendingMachine.scala 26:14]
    when _T : @[VendingMachine.scala 26:24]
      when io.nickel : @[VendingMachine.scala 27:20]
        state <= UInt<3>("h01") @[VendingMachine.scala 28:13]
        skip @[VendingMachine.scala 27:20]
      else : @[VendingMachine.scala 29:24]
        when io.dime : @[VendingMachine.scala 29:24]
          state <= UInt<3>("h02") @[VendingMachine.scala 30:13]
          skip @[VendingMachine.scala 29:24]
        else : @[VendingMachine.scala 31:16]
          state <= state @[VendingMachine.scala 32:13]
          skip @[VendingMachine.scala 31:16]
      skip @[VendingMachine.scala 26:24]
    else : @[VendingMachine.scala 34:27]
      node _T_1 = eq(state, UInt<3>("h01")) @[VendingMachine.scala 34:20]
      when _T_1 : @[VendingMachine.scala 34:27]
        when io.nickel : @[VendingMachine.scala 35:20]
          state <= UInt<3>("h02") @[VendingMachine.scala 36:13]
          skip @[VendingMachine.scala 35:20]
        else : @[VendingMachine.scala 37:24]
          when io.dime : @[VendingMachine.scala 37:24]
            state <= UInt<3>("h03") @[VendingMachine.scala 38:13]
            skip @[VendingMachine.scala 37:24]
          else : @[VendingMachine.scala 39:16]
            state <= state @[VendingMachine.scala 40:13]
            skip @[VendingMachine.scala 39:16]
        skip @[VendingMachine.scala 34:27]
      else : @[VendingMachine.scala 42:28]
        node _T_2 = eq(state, UInt<3>("h02")) @[VendingMachine.scala 42:20]
        when _T_2 : @[VendingMachine.scala 42:28]
          when io.nickel : @[VendingMachine.scala 43:20]
            state <= UInt<3>("h03") @[VendingMachine.scala 44:13]
            skip @[VendingMachine.scala 43:20]
          else : @[VendingMachine.scala 45:24]
            when io.dime : @[VendingMachine.scala 45:24]
              state <= UInt<3>("h04") @[VendingMachine.scala 46:13]
              skip @[VendingMachine.scala 45:24]
            else : @[VendingMachine.scala 47:16]
              state <= state @[VendingMachine.scala 48:13]
              skip @[VendingMachine.scala 47:16]
          skip @[VendingMachine.scala 42:28]
        else : @[VendingMachine.scala 50:28]
          node _T_3 = eq(state, UInt<3>("h03")) @[VendingMachine.scala 50:20]
          when _T_3 : @[VendingMachine.scala 50:28]
            when io.nickel : @[VendingMachine.scala 51:20]
              state <= UInt<3>("h04") @[VendingMachine.scala 52:13]
              skip @[VendingMachine.scala 51:20]
            else : @[VendingMachine.scala 53:24]
              when io.dime : @[VendingMachine.scala 53:24]
                state <= UInt<3>("h04") @[VendingMachine.scala 54:13]
                skip @[VendingMachine.scala 53:24]
              else : @[VendingMachine.scala 55:16]
                state <= state @[VendingMachine.scala 56:13]
                skip @[VendingMachine.scala 55:16]
            skip @[VendingMachine.scala 50:28]
          else : @[VendingMachine.scala 58:28]
            node _T_4 = eq(state, UInt<3>("h04")) @[VendingMachine.scala 58:20]
            when _T_4 : @[VendingMachine.scala 58:28]
              state <= UInt<3>("h00") @[VendingMachine.scala 59:11]
              skip @[VendingMachine.scala 58:28]
            else : @[VendingMachine.scala 60:14]
              state <= UInt<3>("h00") @[VendingMachine.scala 62:11]
              skip @[VendingMachine.scala 60:14]
    node _T_5 = eq(state, UInt<3>("h04")) @[VendingMachine.scala 67:22]
    io.valid <= _T_5 @[VendingMachine.scala 67:12]
    
